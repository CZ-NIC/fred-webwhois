//
// Check/radio
//

input[type=radio] {
    @include transition($form-check-transition);

    appearance: none;
    background-color: $form-check-input-bg;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
    border: $form-check-input-border;
    color-adjust: exact; // Keep themed appearance for print
    display: inline-block;
    height: $form-check-input-width;
    margin-right: space(2);
    margin-top: ($line-height-base - $form-check-input-width) * 0.5; // line-height minus check height
    padding: 0;
    vertical-align: top;
    width: $form-check-input-width;

    &[type="checkbox"] {
        @include border-radius($form-check-input-border-radius);
    }

    &[type="radio"] {
        // stylelint-disable-next-line property-disallowed-list
        border-radius: $form-check-radio-border-radius;
    }

    &:active {
        filter: $form-check-input-active-filter;
    }

    &:focus {
        border-color: $form-check-input-focus-border;
        box-shadow: $form-check-input-focus-box-shadow;
        outline: 0;
    }

    &:checked {
        background-color: $form-check-input-checked-bg-color;
        border-color: $form-check-input-checked-border-color;

        &[type="checkbox"] {
            @if $enable-gradients {
                background-image: escape-svg($form-check-input-checked-bg-image), var(--#{$variable-prefix}gradient);
            } @else {
                background-image: escape-svg($form-check-input-checked-bg-image);
            }
        }

        &[type="radio"] {
            @if $enable-gradients {
                background-image: escape-svg($form-check-radio-checked-bg-image), var(--#{$variable-prefix}gradient);
            } @else {
                background-image: escape-svg($form-check-radio-checked-bg-image);
            }
        }
    }

    &[type="checkbox"]:indeterminate {
        background-color: $form-check-input-indeterminate-bg-color;
        border-color: $form-check-input-indeterminate-border-color;

        @if $enable-gradients {
            background-image: escape-svg($form-check-input-indeterminate-bg-image), var(--#{$variable-prefix}gradient);
        } @else {
            background-image: escape-svg($form-check-input-indeterminate-bg-image);
        }
    }

    &:disabled {
        filter: none;
        opacity: $form-check-input-disabled-opacity;
        pointer-events: none;
    }

    // Use disabled attribute in addition of :disabled pseudo-class
    // See: https://github.com/twbs/bootstrap/issues/28247
    &[disabled],
    &:disabled {
        ~ .form-check-label {
            opacity: $form-check-label-disabled-opacity;
        }
    }
}

.form-check-label {
    color: $form-check-label-color;
    cursor: $form-check-label-cursor;
}

//
// Switch
//

.form-switch {
    padding-left: $form-switch-padding-start;

    .form-check-input {
        @include border-radius($form-switch-border-radius);
        @include transition($form-switch-transition);

        background-image: escape-svg($form-switch-bg-image);
        background-position: left center;
        margin-left: $form-switch-padding-start * -1;
        width: $form-switch-width;

        &:focus {
            background-image: escape-svg($form-switch-focus-bg-image);
        }

        &:checked {
            background-position: $form-switch-checked-bg-position;

            @if $enable-gradients {
                background-image: escape-svg($form-switch-checked-bg-image), var(--#{$variable-prefix}gradient);
            } @else {
                background-image: escape-svg($form-switch-checked-bg-image);
            }
        }
    }
}

.form-check-inline {
    display: inline-block;
    margin-right: $form-check-inline-margin-end;
}

.btn-check {
    clip: rect(0, 0, 0, 0);
    pointer-events: none;
    position: absolute;

    &[disabled],
    &:disabled {
        + .btn {
            filter: none;
            opacity: $form-check-btn-check-disabled-opacity;
            pointer-events: none;
        }
    }
}
